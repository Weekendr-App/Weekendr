// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

enum VenueStatus {
  DRAFT
  ACTIVE
}

enum Role {
  OWNER
  MODERATOR
}

model Venue {
  id        Int     @id @default(autoincrement())
  name      String
  picture   String?
  owner     User    @relation(fields: [userId], references: [id])
  // Prisma does not support PostGIS yet, so we have to use a Float
  // type. This is not ideal, but it works for now.
  latitude  Float
  longitude Float
  address   String

  events Event[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?
  phone     String
  userId    String
  status    VenueStatus @default(DRAFT)

  @@index([latitude, longitude], name: "venue_location")
}

model Event {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  picture     String?

  venue   Venue @relation(fields: [venueId], references: [id])
  venueId Int

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  status    EventStatus @default(DRAFT)
  startDate DateTime
  endDate   DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  price     Float

  @@index([venueId], name: "event_venue")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  events Event[]

  @@index([name], name: "category_name")
}

model User {
  id    String @id
  email String @unique

  role  Role    @default(OWNER)
  Venue Venue[]
}
